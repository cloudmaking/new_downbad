<!DOCTYPE html>
<html>

<head>
    <title>Pixel Art Gen</title>
    <%- include('partials/html_head') %>
    <style>
        body {
            background-color: #d3d3d3; /* Gameboy grey */
        }

        canvas {
            position: absolute;
            width: 90%;
            height: 80%;
            background-color: rgb(0, 0, 0);
            border: 5px solid rgb(108, 108, 108);
            top: 56%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .ui {
            position: absolute;
            top: 7%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgb(0, 0, 0);
            border: 5px solid rgb(108, 108, 108);
            text-align: center;
        }

        button,
        .dropDown {
            background-color: rgb(0, 0, 0);
            color: rgb(255, 255, 255);
            border: 1px solid rgb(108, 108, 108);
            padding: 10px;
            margin: 10px;
            font-size: 20px;
            cursor: pointer;
        }

        .dropDown option {
            background-color: rgb(0, 0, 0);
            color: rgb(255, 255, 255);
        }

        @media screen and (max-width: 700px) {
            .ui,
            canvas button {
                width: 100%;
            }
        }

        @media screen and (max-height: 600px) {
            canvas {
                height: 60%;
            }
        }

        #home-btn {
            background-color: rgb(0, 0, 0);
            color: rgb(255, 255, 255);
            border: 1px solid rgb(108, 108, 108);
            padding: 10px;
            margin: 10px;
            font-size: 20px;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <div class="ui">
        <button id="home-btn" onclick="window.location.href='/'">Home</button>
        <button onclick="startAnimation()">Start</button>
        <button onclick="stopAnimation()">Stop</button>
        <select class="dropDown" id="modeSelect">
            <option value="1">Fractal</option>
            <option value="2">Grower</option>
            <option value="3">SimSize</option>
            <option value="4">Swirl</option> <!-- New algorithm option -->
        </select>
    </div>
    <canvas id="myCanvas"></canvas>
    <script>
        const canvas = document.getElementById("myCanvas");
        const ctx = canvas.getContext("2d");
        const pointSize = 1;
        const whitePixelColour = [255, 255, 255];
        let cancelAnimationId = null;

        function startAnimation() {
            cancelAnimationId = requestAnimationFrame(updateCanvasSize);
        }

        function stopAnimation() {
            cancelAnimationFrame(cancelAnimationId);
            cancelAnimationId = null;
        }

        function updateCanvasSize() {
            canvas.width = window.innerWidth * 0.9;
            canvas.height = window.innerHeight * 0.8;

            // clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // run the startSimulation function
            startSimulation();

            // request another frame if the animation is still running
            if (cancelAnimationId !== null) {
                cancelAnimationId = requestAnimationFrame(updateCanvasSize);
            }
        }

        window.addEventListener('resize', updateCanvasSize);

        function drawPixel(x, y, color) {
            const pixel = ctx.createImageData(1, 1);
            pixel.data[0] = color[0];
            pixel.data[1] = color[1];
            pixel.data[2] = color[2];
            pixel.data[3] = 255;
            ctx.putImageData(pixel, x, y);
        }

        function checkColor(x, y) {
            const pixel = ctx.getImageData(x, y, pointSize, pointSize);
            const data = pixel.data;
            return `rgb(${data[0]}, ${data[1]}, ${data[2]})`;
        }

        function randomWalk(x, y) {
            const directions = [
                [0, -1], // Up
                [1, 0], // Right
                [0, 1], // Down
                [-1, 0] // Left
            ];

            while (x >= 0 && x < canvas.width && y >= 0 && y < canvas.height) {
                const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];
                x += dx;
                y += dy;

                if (checkColor(x, y) === "rgb(0, 0, 0)") {
                    drawPixel(x, y, whitePixelColour);
                }
            }
        }

        function displayCanvasSize() {
            const canvasSize = `${canvas.width} x ${canvas.height}`;
            ctx.font = "30px Arial";
            ctx.fillStyle = "white";
            ctx.textAlign = "center";
            ctx.fillText(canvasSize, canvas.width / 2, canvas.height / 2);
        }

        function fractalPattern() {
            const maxIterations = 50000;
            const hueShift = 0.5;
            for (let i = 0; i < maxIterations; i++) {
                const x = Math.random() * canvas.width;
                const y = Math.random() * canvas.height;
                const color = hslToRgb((i * hueShift) % 360, 100, 50);
                drawPixel(x, y, color);
            }
        }

        function growPattern() {
            const directions = [
                [0, -1], // Up
                [1, 0], // Right
                [0, 1], // Down
                [-1, 0] // Left
            ];
            const growthSteps = 10000;
            let x = canvas.width / 2;
            let y = canvas.height / 2;

            for (let i = 0; i < growthSteps; i++) {
                const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];
                x += dx;
                y += dy;

                if (x >= 0 && x < canvas.width && y >= 0 && y < canvas.height) {
                    const color = [i % 255, (i * 2) % 255, (i * 3) % 255];
                    drawPixel(x, y, color);
                }
            }
        }

        function swirlPattern() {
            const cx = canvas.width / 2;
            const cy = canvas.height / 2;
            const maxRadius = Math.min(canvas.width, canvas.height) / 2;
            const spiralDensity = 0.1;
            let angle = 0;
            let radius = 0;

            while (radius < maxRadius) {
                const x = cx + radius * Math.cos(angle);
                const y = cy + radius * Math.sin(angle);
                const color = hslToRgb((angle * 10) % 360, 100, 50);
                drawPixel(x, y, color);
                angle += spiralDensity;
                radius += 0.1;
            }
        }

        function startSimulation() {
            const selectedOption = document.getElementById("modeSelect").value;

            switch (selectedOption) {
                case "1":
                    fractalPattern();
                    break;
                case "2":
                    growPattern();
                    break;
                case "3":
                    displayCanvasSize();
                    break;
                case "4":
                    swirlPattern();
                    break;
            }
        }

        function hslToRgb(h, s, l) {
            s /= 100;
            l /= 100;

            const k = n => (n + h / 30) % 12;
            const a = s * Math.min(l, 1 - l);
            const f = n => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));

            return [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        }

        // Initialize canvas size on load
        updateCanvasSize();
    </script>
</body>

</html>
