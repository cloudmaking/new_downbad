<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta
    name="description"
    content="Manage your finances with precision using our  Budget App. Get detailed insights into your future monthly balances, expenses, and savings."
  />
  <meta
    name="keywords"
    content="budget, finance, savings, expenses, monthly balance, budgeting tool, advanced budget app, detailed budgeting, financial management, income tracking"
  />
  <meta name="author" content="Downbad Cloud" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title> Budget App - Detailed Financial Management</title>
  <%- include('partials/html_head') %>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Datepicker -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body class="bg-gray-900 text-gray-100 font-sans min-h-screen flex flex-col">
  <%- include('partials/gtm_body') %>
  <header class="bg-gray-800 py-6">
    <div class="container mx-auto px-6">
      <h1 class="text-3xl font-bold text-center text-indigo-400">
        <i class="fas fa-chart-line mr-2"></i> Budget App <sup class="text-sm text-gray-500">v2</sup>
      </h1>
      <p class="text-center text-gray-400">Financial Clarity, Projected.</p>
    </div>
  </header>

  <div class="container mx-auto p-6 flex-grow">
    <div class="bg-gray-800 rounded-xl shadow-xl p-8 max-w-5xl mx-auto">
      <section id="inputs-section" class="mb-10">
        <h2 class="text-2xl font-semibold mb-6 text-indigo-300 border-b border-gray-700 pb-2">
          <i class="fas fa-edit mr-2"></i> Financial Inputs & Projections
        </h2>

        <!-- Current Balance -->
        <div class="mb-6">
          <label for="currentBalance" class="block mb-3 font-medium">
            <i class="fas fa-wallet mr-1"></i> Starting Balance
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <span class="text-gray-500">$</span>
            </div>
            <input
              type="number"
              id="currentBalance"
              class="w-full pl-7 pr-3 py-3 rounded-lg bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
              placeholder="Enter starting balance"
            />
          </div>
          <p class="text-sm text-gray-500 mt-1">Balance at the beginning of the projection period.</p>
        </div>

        <!-- Projection Start Date -->
        <div class="mb-6">
          <label for="startDate" class="block mb-3 font-medium">
            <i class="fas fa-calendar-alt mr-1"></i> Projection Start Date
          </label>
          <div class="relative">
            <input
              type="text"
              id="startDate"
              class="datepicker w-full pr-3 py-3 rounded-lg bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
              placeholder="Select start date"
            />
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <i class="fas fa-calendar text-gray-500"></i>
            </div>
          </div>
          <p class="text-sm text-gray-500 mt-1">The date from which the budget projection begins.</p>
        </div>


        <!-- Income Section -->
        <div class="mb-8">
          <h3 class="text-xl font-semibold mb-4 text-indigo-300">
            <i class="fas fa-plus-circle mr-2"></i> Monthly Income Sources
          </h3>
          <div id="incomesContainer"></div>
          <button
            type="button"
            onclick="addIncome()"
            class="mt-3 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-5 rounded-lg"
          >
            <i class="fas fa-plus mr-2"></i> Add Income Source
          </button>
          <p class="text-sm text-gray-500 mt-1">Recurring monthly income.</p>
        </div>

        <!-- Bills Section -->
        <div class="mb-8">
          <h3 class="text-xl font-semibold mb-4 text-indigo-300">
            <i class="fas fa-file-invoice-dollar mr-2"></i> Monthly Bills & Subscriptions
          </h3>
          <div id="billsContainer"></div>
          <button
            type="button"
            onclick="addBill()"
            class="mt-3 bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-5 rounded-lg"
          >
            <i class="fas fa-plus mr-2"></i> Add Bill
          </button>
          <p class="text-sm text-gray-500 mt-1">Recurring monthly expenses like rent, utilities, subscriptions.</p>
        </div>

        <!-- Expenses Section -->
        <div>
          <h3 class="text-xl font-semibold mb-4 text-indigo-300">
            <i class="fas fa-shopping-cart mr-2"></i> Weekly Expenses (Averages)
          </h3>
          <div id="expensesContainer"></div>
          <button
            type="button"
            onclick="addExpense()"
            class="mt-3 bg-yellow-600 hover:bg-yellow-700 text-white font-semibold py-3 px-5 rounded-lg"
          >
            <i class="fas fa-plus mr-2"></i> Add Weekly Expense
          </button>
          <p class="text-sm text-gray-500 mt-1">Average weekly spending on variable expenses like groceries, transport, entertainment.</p>
        </div>

        <button
          onclick="calculateBalance()"
          class="w-full bg-indigo-700 hover:bg-indigo-800 text-white font-semibold py-4 px-7 rounded-lg mt-8 text-xl"
        >
          <i class="fas fa-calculator mr-2"></i> Recalculate Financial Projections
        </button>
      </section>

      <section id="results-section" class="mt-12">
        <h2 class="text-2xl font-semibold text-center mb-8 text-indigo-400 border-b border-gray-700 pb-2">
          <i class="fas fa-chart-bar mr-2"></i> Projected Monthly Financial Breakdown
        </h2>

        <div id="results" class="mb-10 relative h-[400px]">
          <canvas id="budgetChart"></canvas>
        </div>

        <div id="resultsTableContainer" class="overflow-x-auto">
          <table id="resultsTable" class="min-w-full table-auto rounded-lg shadow-md bg-gray-700">
            <thead class="bg-gray-600 text-gray-200">
              <tr>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Month</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Starting Balance</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Income</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Bills</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Expenses</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Ending Balance</th>
                <th class="px-5 py-3 border-b-2 border-gray-500 text-left text-sm font-semibold uppercase tracking-wider">Savings</th>
              </tr>
            </thead>
            <tbody id="resultsTableBody" class="text-gray-300">
              <!-- Results will be inserted here -->
            </tbody>
          </table>
        </div>
      </section>
    </div>
  </div>

  <footer class="bg-gray-800 py-6 mt-12">
    <div class="container mx-auto px-6 text-center">
      <a
        href="https://www.downbad.cloud"
        class="home-button text-blue-400 hover:text-blue-300 underline block mb-3"
      >
        <i class="fas fa-home mr-2"></i> Return to Downbad.Cloud
      </a>
      <div class="donation-link mb-3">
        <a
          href="https://www.paypal.com/donate/?hosted_button_id=66P4DZ3GAYA8N"
          target="_blank"
          class="text-blue-400 hover:text-blue-300 underline"
        >
          <i class="fas fa-coffee mr-2"></i> Support Site Development (Donate)
        </a>
      </div>
      <p class="text-gray-500 mt-2 text-sm">
        Â© 2024 Downbad.Cloud | Crafted with <i class="fas fa-code"></i> & <i class="fas fa-heart text-red-500"></i> in the Cloud.
      </p>
    </div>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', initializeApp);

    function initializeApp() {
      flatpickr(".datepicker", {
        dateFormat: "Y-m-d",
        initialDate: new Date(),
      });
      loadSavedData();
      calculateBalance(); // Initial calculation on load
    }

    function loadSavedData() {
      const savedData = JSON.parse(localStorage.getItem('budgetAppData') || '{}');
      document.getElementById('currentBalance').value = savedData.currentBalance || '0';
      document.getElementById('startDate').value = savedData.startDate || formatDate(new Date());

      if (savedData.incomes) {
        savedData.incomes.forEach(income => addIncome(income.name, income.amount));
      } else {
        addIncome('Salary', 2500); // Default income
      }

      if (savedData.bills) {
        savedData.bills.forEach(bill => addBill(bill.name, bill.amount));
      } else {
        addBill('Rent', 1200); // Default bill
        addBill('Utilities', 200);
      }

      if (savedData.expenses) {
        savedData.expenses.forEach(expense => addExpense(expense.name, expense.amount));
      } else {
        addExpense('Groceries', 75); // Default expenses
        addExpense('Transportation', 50);
      }
    }

    function saveAppData() {
      const appData = {
        currentBalance: document.getElementById('currentBalance').value,
        startDate: document.getElementById('startDate').value,
        incomes: getItemsData('income-item'),
        bills: getItemsData('bill-item'),
        expenses: getItemsData('expense-item'),
      };
      localStorage.setItem('budgetAppData', JSON.stringify(appData));
    }

    function getItemsData(itemClass) {
      return Array.from(document.querySelectorAll(`.${itemClass}`)).map(item => ({
        name: item.querySelector(`.${itemClass.replace('-item', '-name')}`).value,
        amount: item.querySelector(`.${itemClass.replace('-item', '-amount')}`).value
      }));
    }


    function removeRow(element) {
      element.closest('.input-item-group').remove();
      saveAppData();
      calculateBalance(); // Recalculate after removing
    }

    function createInputRow(containerId, type) {
      const container = document.getElementById(containerId);
      const div = document.createElement('div');
      div.className = `input-item-group ${type}-item mb-4 flex space-x-3 items-center`;
      div.innerHTML = `
        <div class="flex-1">
          <input
            type="text"
            placeholder="${type.charAt(0).toUpperCase() + type.slice(1)} Name"
            class="${type}-name w-full p-3 rounded-lg bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
            required
          />
        </div>
        <div class="relative flex-1">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <span class="text-gray-500">$</span>
          </div>
          <input
            type="number"
            placeholder="Monthly Amount"
            class="${type}-amount w-full pl-7 pr-3 py-3 rounded-lg bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
            required
          />
        </div>
        <button
          type="button"
          onclick="removeRow(this)"
          class="bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-5 rounded-lg"
          aria-label="Delete ${type}"
        >
          <i class="fas fa-trash-alt"></i>
        </button>
      `;
      container.appendChild(div);
      saveAppData(); // Save data on adding new row
    }


    function addIncome(name = '', amount = '') {
      createInputRow('incomesContainer', 'income');
      const newItem = document.querySelector('#incomesContainer').lastElementChild;
      if (name) newItem.querySelector('.income-name').value = name;
      if (amount) newItem.querySelector('.income-amount').value = amount;
    }

    function addBill(name = '', amount = '') {
      createInputRow('billsContainer', 'bill');
      const newItem = document.querySelector('#billsContainer').lastElementChild;
      if (name) newItem.querySelector('.bill-name').value = name;
      if (amount) newItem.querySelector('.bill-amount').value = amount;
    }

    function addExpense(name = '', amount = '') {
      createInputRow('expensesContainer', 'expense');
      const newItem = document.querySelector('#expensesContainer').lastElementChild;
      if (name) newItem.querySelector('.expense-name').value = name;
      if (amount) newItem.querySelector('.expense-amount').value = amount;
    }


    function calculateBalance() {
      saveAppData(); // Save data before calculation

      let currentBalance = parseFloat(document.getElementById('currentBalance').value) || 0;
      const startDateStr = document.getElementById('startDate').value;
      const startDate = new Date(startDateStr);
      const monthlyResults = [];

      const incomes = getItemsData('income-item');
      const bills = getItemsData('bill-item');
      const expenses = getItemsData('expense-item');

      let totalMonthlyIncome = incomes.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalMonthlyBills = bills.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalWeeklyExpenses = expenses.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalMonthlyExpenses = totalWeeklyExpenses * 4; // Approximating weeks per month

      let projectionBalance = currentBalance;


      for (let month = 0; month < 12; month++) {
        const projectionDate = new Date(startDate);
        projectionDate.setMonth(startDate.getMonth() + month);
        const monthLabel = formatDateToMonthYear(projectionDate);

        const startingBalance = projectionBalance;
        projectionBalance += totalMonthlyIncome;
        projectionBalance -= totalMonthlyBills;
        projectionBalance -= totalMonthlyExpenses;
        const savings = totalMonthlyIncome - totalMonthlyBills - totalMonthlyExpenses;


        monthlyResults.push({
          monthLabel: monthLabel,
          startingBalance: startingBalance,
          income: totalMonthlyIncome,
          bills: totalMonthlyBills,
          expenses: totalMonthlyExpenses,
          endingBalance: projectionBalance,
          savings: savings
        });
      }

      renderResultsTable(monthlyResults);
      renderResultsChart(monthlyResults);
    }


    function renderResultsTable(results) {
      const tableBody = document.getElementById('resultsTableBody');
      tableBody.innerHTML = ''; // Clear previous results

      results.forEach(monthData => {
        const row = tableBody.insertRow();

        row.insertCell().textContent = monthData.monthLabel;
        row.insertCell().textContent = `$${monthData.startingBalance.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.income.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.bills.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.expenses.toFixed(2)}`;

        const endingBalanceCell = row.insertCell();
        endingBalanceCell.textContent = `$${monthData.endingBalance.toFixed(2)}`;
        if (monthData.endingBalance < 0) {
          endingBalanceCell.classList.add('text-red-500', 'font-semibold');
        } else {
          endingBalanceCell.classList.add('text-green-500');
        }

        const savingsCell = row.insertCell();
        savingsCell.textContent = `$${monthData.savings.toFixed(2)}`;
        if (monthData.savings < 0) {
          savingsCell.classList.add('text-red-500', 'font-semibold');
        } else {
          savingsCell.classList.add('text-green-500');
        }
      });
    }


    function renderResultsChart(results) {
      const chartCanvas = document.getElementById('budgetChart');
      if (window.budgetChartInstance) {
        window.budgetChartInstance.destroy(); // Destroy existing chart if any
      }

      const monthLabels = results.map(data => data.monthLabel);
      const endingBalances = results.map(data => data.endingBalance);

      window.budgetChartInstance = new Chart(chartCanvas, {
        type: 'line',
        data: {
          labels: monthLabels,
          datasets: [{
            label: 'Projected Ending Balance',
            data: endingBalances,
            borderColor: 'rgb(75, 192, 192)',
            borderWidth: 2,
            tension: 0.4,
            fill: false,
            pointRadius: 3,
            pointHoverRadius: 7,
            backgroundColor: 'white'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false,
              ticks: {
                callback: function(value, index, values) {
                  return '$' + value;
                },
                color: 'white'
              },
              grid: {
                color: 'rgba(255,255,255,0.1)'
              }
            },
            x: {
              ticks: {
                color: 'white'
              },
              grid: {
                color: 'rgba(255,255,255,0.1)'
              }
            }
          },
          plugins: {
            legend: {
              labels: {
                color: 'white'
              },
              align: 'center'
            },
            title: {
              display: true,
              text: '12-Month Balance Projection',
              color: 'white',
              font: {
                size: 18
              },
              padding: {
                top: 10,
                bottom: 15
              }
            }
          }
        }
      });
    }

    function formatDateToMonthYear(date) {
      const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return `${monthNames[date.getMonth()]} ${date.getFullYear()}`;
    }

    function formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }


  </script>
</body>
</html>