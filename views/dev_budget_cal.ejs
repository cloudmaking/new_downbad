<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta
    name="description"
    content="Manage your finances with precision using our Advanced Budget App. Get detailed insights into your future monthly balances, expenses, and savings."
  />
  <meta
    name="keywords"
    content="budget, finance, savings, expenses, monthly balance, budgeting tool, advanced budget app, detailed budgeting, financial management, income tracking"
  />
  <meta name="author" content="YourName" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Advanced Budget App - Detailed Financial Management</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body class="bg-gray-900 text-gray-100 font-sans min-h-screen flex flex-col">
  <header class="bg-gray-800 py-4">
    <h1 class="text-3xl font-bold text-center text-indigo-400">
      <i class="fas fa-chart-line mr-2"></i> DEV-Advanced Budget App
    </h1>
    <p class="text-center text-gray-400">Your detailed financial command center.</p>
  </header>

  <div class="container mx-auto p-6 flex-grow">
    <div class="bg-gray-800 rounded-lg shadow-xl p-6 max-w-4xl mx-auto">
      <section id="inputs-section" class="mb-8">
        <h2 class="text-2xl font-semibold mb-4 text-indigo-300">
          <i class="fas fa-edit mr-2"></i> Financial Inputs
        </h2>

        <!-- Current Balance -->
        <div class="mb-4">
          <label for="currentBalance" class="block mb-2 font-medium">
            <i class="fas fa-wallet mr-1"></i> Current Balance
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <span class="text-gray-500">$</span>
            </div>
            <input
              type="number"
              id="currentBalance"
              class="w-full pl-7 pr-3 py-2 rounded bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
              placeholder="Enter current balance"
            />
          </div>
        </div>

        <!-- Income Section -->
        <div class="mb-6">
          <h3 class="text-xl font-semibold mb-3 text-indigo-300">
            <i class="fas fa-plus-circle mr-2"></i> Monthly Income
          </h3>
          <div id="incomesContainer"></div>
          <button
            type="button"
            onclick="addIncome()"
            class="mt-2 bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded"
          >
            <i class="fas fa-plus mr-1"></i> Add Income
          </button>
        </div>

        <!-- Bills Section -->
        <div class="mb-6">
          <h3 class="text-xl font-semibold mb-3 text-indigo-300">
            <i class="fas fa-file-invoice-dollar mr-2"></i> Monthly Bills
          </h3>
          <div id="billsContainer"></div>
          <button
            type="button"
            onclick="addBill()"
            class="mt-2 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded"
          >
            <i class="fas fa-plus mr-1"></i> Add Bill
          </button>
        </div>

        <!-- Expenses Section -->
        <div>
          <h3 class="text-xl font-semibold mb-3 text-indigo-300">
            <i class="fas fa-shopping-cart mr-2"></i> Weekly Expenses
          </h3>
          <div id="expensesContainer"></div>
          <button
            type="button"
            onclick="addExpense()"
            class="mt-2 bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-2 px-4 rounded"
          >
            <i class="fas fa-plus mr-1"></i> Add Expense
          </button>
        </div>

        <button
          onclick="calculateBalance()"
          class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-6 rounded mt-6"
        >
          <i class="fas fa-calculator mr-2"></i> Calculate Financial Breakdown
        </button>
      </section>

      <section id="results-section" class="mt-8">
        <h2 class="text-2xl font-semibold text-center mb-6 text-indigo-400">
          <i class="fas fa-chart-bar mr-2"></i> Monthly Financial Breakdown
        </h2>

        <div id="results" class="mb-8">
          <canvas id="budgetChart"></canvas>
        </div>

        <div id="resultsTableContainer" class="overflow-x-auto">
          <table id="resultsTable" class="min-w-full table-auto">
            <thead class="bg-gray-700">
              <tr>
                <th class="px-4 py-2 text-left">Month</th>
                <th class="px-4 py-2 text-left">Starting Balance</th>
                <th class="px-4 py-2 text-left">Total Income</th>
                <th class="px-4 py-2 text-left">Total Bills</th>
                <th class="px-4 py-2 text-left">Total Expenses</th>
                <th class="px-4 py-2 text-left">Ending Balance</th>
                <th class="px-4 py-2 text-left">Savings</th>
              </tr>
            </thead>
            <tbody id="resultsTableBody" class="text-gray-300">
              <!-- Results will be inserted here -->
            </tbody>
          </table>
        </div>
      </section>
    </div>
  </div>

  <footer class="bg-gray-800 py-4 mt-8">
    <div class="container mx-auto px-6 text-center">
      <a
        href="https://www.downbad.cloud"
        class="home-button text-blue-400 hover:text-blue-300 underline block mb-2"
      >
        <i class="fas fa-home mr-1"></i> Return to Home
      </a>
      <div class="donation-link">
        <a
          href="https://www.paypal.com/donate/?hosted_button_id=66P4DZ3GAYA8N"
          target="_blank"
          class="text-blue-400 hover:text-blue-300 underline"
        >
          <i class="fas fa-heart mr-1"></i> Donate for site development
        </a>
      </div>
      <p class="text-gray-500 mt-2 text-sm">
        Â© 2024 Advanced Budget App. Crafted with <i class="fas fa-code"></i> and <i class="fas fa-heart text-red-500"></i>.
      </p>
    </div>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', initializeApp);

    function initializeApp() {
      loadSavedData();
      calculateBalance(); // Initial calculation on load
    }

    function loadSavedData() {
      const savedData = JSON.parse(localStorage.getItem('budgetAppData') || '{}');
      document.getElementById('currentBalance').value = savedData.currentBalance || '0';

      if (savedData.incomes) {
        savedData.incomes.forEach(income => addIncome(income.name, income.amount));
      } else {
        addIncome('Salary', 2500); // Default income
      }

      if (savedData.bills) {
        savedData.bills.forEach(bill => addBill(bill.name, bill.amount));
      } else {
        addBill('Rent', 1200); // Default bill
        addBill('Utilities', 200);
      }

      if (savedData.expenses) {
        savedData.expenses.forEach(expense => addExpense(expense.name, expense.amount));
      } else {
        addExpense('Groceries', 75); // Default expenses
        addExpense('Transportation', 50);
      }
    }

    function saveAppData() {
      const appData = {
        currentBalance: document.getElementById('currentBalance').value,
        incomes: getItemsData('income-item'),
        bills: getItemsData('bill-item'),
        expenses: getItemsData('expense-item'),
      };
      localStorage.setItem('budgetAppData', JSON.stringify(appData));
    }

    function getItemsData(itemClass) {
      return Array.from(document.querySelectorAll(`.${itemClass}`)).map(item => ({
        name: item.querySelector(`.${itemClass.replace('-item', '-name')}`).value,
        amount: item.querySelector(`.${itemClass.replace('-item', '-amount')}`).value
      }));
    }


    function removeRow(element) {
      element.closest('.input-item-group').remove();
      saveAppData();
      calculateBalance(); // Recalculate after removing
    }

    function createInputRow(containerId, type) {
      const container = document.getElementById(containerId);
      const div = document.createElement('div');
      div.className = `input-item-group ${type}-item mb-3 flex space-x-2 items-center`;
      div.innerHTML = `
        <input
          type="text"
          placeholder="${type.charAt(0).toUpperCase() + type.slice(1)} Name"
          class="${type}-name w-1/3 p-2 rounded bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
          required
        />
        <div class="relative w-1/3">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <span class="text-gray-500">$</span>
          </div>
          <input
            type="number"
            placeholder="Amount"
            class="${type}-amount w-full pl-7 pr-3 py-2 rounded bg-gray-700 border border-gray-700 focus:ring-indigo-500 focus:border-indigo-500 text-gray-100 placeholder-gray-500"
            required
          />
        </div>
        <button
          type="button"
          onclick="removeRow(this)"
          class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded"
          aria-label="Delete ${type}"
        >
          <i class="fas fa-trash-alt"></i>
        </button>
      `;
      container.appendChild(div);
      saveAppData(); // Save data on adding new row
    }


    function addIncome(name = '', amount = '') {
      createInputRow('incomesContainer', 'income');
      const newItem = document.querySelector('#incomesContainer').lastElementChild;
      if (name) newItem.querySelector('.income-name').value = name;
      if (amount) newItem.querySelector('.income-amount').value = amount;
    }

    function addBill(name = '', amount = '') {
      createInputRow('billsContainer', 'bill');
      const newItem = document.querySelector('#billsContainer').lastElementChild;
      if (name) newItem.querySelector('.bill-name').value = name;
      if (amount) newItem.querySelector('.bill-amount').value = amount;
    }

    function addExpense(name = '', amount = '') {
      createInputRow('expensesContainer', 'expense');
      const newItem = document.querySelector('#expensesContainer').lastElementChild;
      if (name) newItem.querySelector('.expense-name').value = name;
      if (amount) newItem.querySelector('.expense-amount').value = amount;
    }


    function calculateBalance() {
      saveAppData(); // Save data before calculation

      let currentBalance = parseFloat(document.getElementById('currentBalance').value) || 0;
      const monthlyResults = [];

      const incomes = getItemsData('income-item');
      const bills = getItemsData('bill-item');
      const expenses = getItemsData('expense-item');

      let totalMonthlyIncome = incomes.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalMonthlyBills = bills.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalWeeklyExpenses = expenses.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0);
      let totalMonthlyExpenses = totalWeeklyExpenses * 4; // Approximating weeks per month

      let startingBalance = currentBalance;

      for (let month = 1; month <= 12; month++) {
        startingBalance = currentBalance;
        currentBalance += totalMonthlyIncome;
        currentBalance -= totalMonthlyBills;
        currentBalance -= totalMonthlyExpenses;

        const savings = totalMonthlyIncome - totalMonthlyBills - totalMonthlyExpenses;
        monthlyResults.push({
          month: month,
          startingBalance: startingBalance,
          income: totalMonthlyIncome,
          bills: totalMonthlyBills,
          expenses: totalMonthlyExpenses,
          endingBalance: currentBalance,
          savings: savings
        });
      }

      renderResultsTable(monthlyResults);
      renderResultsChart(monthlyResults);
    }


    function renderResultsTable(results) {
      const tableBody = document.getElementById('resultsTableBody');
      tableBody.innerHTML = ''; // Clear previous results

      results.forEach(monthData => {
        const row = tableBody.insertRow();

        row.insertCell().textContent = `Month ${monthData.month}`;
        row.insertCell().textContent = `$${monthData.startingBalance.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.income.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.bills.toFixed(2)}`;
        row.insertCell().textContent = `$${monthData.expenses.toFixed(2)}`;

        const endingBalanceCell = row.insertCell();
        endingBalanceCell.textContent = `$${monthData.endingBalance.toFixed(2)}`;
        if (monthData.endingBalance < 0) {
          endingBalanceCell.classList.add('text-red-500', 'font-semibold');
        } else {
          endingBalanceCell.classList.add('text-green-500');
        }

        const savingsCell = row.insertCell();
        savingsCell.textContent = `$${monthData.savings.toFixed(2)}`;
        if (monthData.savings < 0) {
          savingsCell.classList.add('text-red-500', 'font-semibold');
        } else {
          savingsCell.classList.add('text-green-500');
        }
      });
    }


    function renderResultsChart(results) {
      const chartCanvas = document.getElementById('budgetChart');
      if (window.budgetChartInstance) {
        window.budgetChartInstance.destroy(); // Destroy existing chart if any
      }

      const monthLabels = results.map(data => `Month ${data.month}`);
      const endingBalances = results.map(data => data.endingBalance);

      window.budgetChartInstance = new Chart(chartCanvas, {
        type: 'line',
        data: {
          labels: monthLabels,
          datasets: [{
            label: 'Projected Ending Balance',
            data: endingBalances,
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1,
            fill: false
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: false,
              ticks: {
                callback: function(value, index, values) {
                  return '$' + value;
                }
              }
            }
          },
          plugins: {
            legend: {
              labels: {
                color: 'white'
              }
            },
            title: {
              display: true,
              text: 'Projected Monthly Balances',
              color: 'white'
            }
          }
        }
      });
    }


  </script>
</body>
</html>